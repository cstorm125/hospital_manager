ratio = read_excel(paste0(input_path,'FinancialRatios.xlsx'),
col_types = c('numeric', 'text', rep('numeric',25)))
names(ratio) = c('hosid','metric',names(ratio)[3:dim(ratio)[2]])
ratio = ratio %>% filter(!is.na(hosid))
#melted
ratio_m = melt(ratio, id.vars = c('hosid','metric'))
names(ratio_m) = c('hosid','metric','yrs','value')
ratio_m$yrs = as.numeric(as.character(ratio_m$yrs))
ratio_m$metric = sapply(ratio_m$metric,process_col)
print(unique(ratio_m$metric))
#write
write_fst(ratio_m,paste0(output_path,'ratio_m.fst'))
#averge
ratio_agg = ratio_m %>% group_by(metric,yrs) %>% dplyr::summarise(avg_value = mean(value,na.rm = TRUE))
#sample plot
ratio_sample = ratio_m %>% filter(hosid==3) %>% inner_join(ratio_agg)
ratio_sample = melt(ratio_sample,id.vars=c('hosid','metric','yrs')) %>%
mutate(variable=as.character(variable)) %>% filter(variable=='avg_value')
g = ggplot(ratio_sample, aes(x=yrs,y=value,color=variable,group=variable)) + geom_point(size=0.5) +
geom_line()+facet_wrap(~metric,scales='free',ncol=4) + theme_fivethirtyeight() +
scale_color_wsj() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_continuous(breaks = seq(1990,2016,5))
g
fte = read_excel(paste0(input_path,'FTE.xlsx'),
col_types = c('numeric', rep('numeric',41)))
names(fte) = c('hosid',names(fte)[2:dim(fte)[2]])
#melted
fte_m = melt(fte, id.vars = c('hosid'))
names(fte_m) = c('hosid','yrs','fte')
fte_m$yrs = as.numeric(as.character(fte_m$yrs))
#write
write_fst(fte_m,paste0(output_path,'fte_m.fst'))
#averge
fte_agg = fte_m %>% group_by(yrs) %>% dplyr::summarise(avg_fte = mean(fte,na.rm = TRUE))
#sample plot
fte_sample = fte_m %>% filter(hosid==3) %>% inner_join(fte_agg)
fte_sample = melt(fte_sample,id.vars=c('hosid','yrs')) %>%
mutate(variable=as.character(variable)) %>% filter(variable=='avg_fte')
g = ggplot(fte_sample, aes(x=yrs,y=value,color=variable,group=variable)) + geom_point(size=0.5) +
geom_line()+ theme_fivethirtyeight() +
scale_color_wsj() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_continuous(breaks = seq(1975,2016,5))
g
income = read_excel(paste0(input_path,'IncomeStatement.xlsx'),
col_types = c('numeric', 'text', rep('numeric',26)))
names(income) = c('hosid','metric',names(income)[3:dim(income)[2]])
income = income %>% filter(!is.na(metric))
#melted
income_m = melt(income, id.vars = c('hosid','metric'))
names(income_m) = c('hosid','metric','yrs','value')
income_m$yrs = as.numeric(as.character(income_m$yrs))
income_m$metric = sapply(income_m$metric,process_col)
print(unique(income_m$metric))
#write
write_fst(income_m,paste0(output_path,'income_m.fst'))
#averge
income_agg = income_m %>% group_by(metric,yrs) %>% dplyr::summarise(avg_value = mean(value,na.rm = TRUE))
#sample plot
income_sample = income_m %>% filter(hosid==3) %>% inner_join(income_agg)
income_sample = melt(income_sample,id.vars=c('hosid','metric','yrs')) %>%
mutate(variable=as.character(variable)) %>% filter(variable=='avg_value')
g = ggplot(income_sample, aes(x=yrs,y=value,color=variable,group=variable)) + geom_point(size=0.5) +
geom_line()+facet_wrap(~metric,scales='free',ncol=4) + theme_fivethirtyeight() +
scale_color_wsj() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_continuous(breaks = seq(1990,2016,5))
g
rate = read_excel(paste0(input_path,'RateAnalysis.xlsx'),
col_types = c('numeric', 'text', rep('numeric',25)))
names(rate) = c('hosid','metric',names(rate)[3:dim(rate)[2]])
rate = rate %>% filter(!is.na(hosid))
#melted
rate_m = melt(rate, id.vars = c('hosid','metric'))
names(rate_m) = c('hosid','metric','yrs','value')
rate_m$yrs = as.numeric(as.character(rate_m$yrs))
rate_m$metric = sapply(rate_m$metric,process_col)
#remove case mix index anomaly
remove_cmi_anomaly = function(metric,value){
is_anomaly = value > 10 & metric=='case_mix_index'
if (is_anomaly | is.na(is_anomaly)){
return(NA)
} else {
return(value)
}
}
rate_m$value = mapply(remove_cmi_anomaly,rate_m$metric,rate_m$value)
#write
write_fst(rate_m,paste0(output_path,'rate_m.fst'))
#averge
rate_agg = rate_m %>% group_by(metric,yrs) %>% dplyr::summarise(avg_value = mean(value,na.rm = TRUE))
#sample plot
rate_sample = rate_m %>% filter(hosid==3) %>% inner_join(rate_agg)
rate_sample = melt(rate_sample,id.vars=c('hosid','metric','yrs')) %>%
mutate(variable=as.character(variable)) %>% filter(variable=='avg_value')
g = ggplot(rate_sample, aes(x=yrs,y=value,color=variable,group=variable)) + geom_point(size=0.5) +
geom_line()+facet_wrap(~metric,scales='free',ncol=4) + theme_fivethirtyeight() +
scale_color_wsj() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_continuous(breaks = seq(1990,2016,5))
g
volume = read_excel(paste0(input_path,'VolumeTrends.xlsx'),
col_types = c('numeric', 'text', rep('numeric',25)))
names(volume) = c('hosid','metric',names(volume)[3:dim(volume)[2]])
volume = volume %>% filter(!is.na(hosid))
#get rid of names
names_idx = seq(1,dim(volume)[1],16)
volume = volume[-names_idx,]
#melted
volume_m = melt(volume, id.vars = c('hosid','metric'))
names(volume_m) = c('hosid','metric','yrs','value')
volume_m$yrs = as.numeric(as.character(volume_m$yrs))
volume_m$metric = sapply(volume_m$metric,process_col)
print(unique(volume_m$metric))
#write
write_fst(volume_m,paste0(output_path,'volume_m.fst'))
#averge
volume_agg = volume_m %>% group_by(metric,yrs) %>% dplyr::summarise(avg_value = mean(value,na.rm = TRUE))
#sample plot
volume_sample = volume_m %>% filter(hosid==3) %>% inner_join(volume_agg)
volume_sample = melt(volume_sample,id.vars=c('hosid','metric','yrs')) %>%
mutate(variable=as.character(variable)) %>% filter(variable=='avg_value')
g = ggplot(volume_sample, aes(x=yrs,y=value,color=variable,group=variable)) + geom_point(size=0.5) +
geom_line()+facet_wrap(~metric,scales='free',ncol=4) + theme_fivethirtyeight() +
scale_color_wsj() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_continuous(breaks = seq(1990,2016,5))
g
#selected columns
income_selected = c('inpatient_revenue','outpatient_revenue','total_patient_revenue',
'bad_debts','contractual_adjustments',
'charity_care','other_adjustments','other_operating_revenue',
'tax_revenue','salaries_and_benefits','employee_benefits','professional_fees',
'supplies','purchased_services_utilities','purchased_services_other','depreciation',
'rentals_and_leases','insurance','license_and_taxes','interest','other_direct_expenses',
'non_operating_income','extraordinary_items','federal_income_tax',
#for y
'net_revenue_or_expense')
balance_selected = c('total_current_assets','total_board_designated_assets','total_property_plant_equipment',
'less_accumulated_depreciation','total_investments_other_assets','total_intangible_assets',
'total_current_liabilities','total_deferred_credits','total_long_term_debt',
'less_current_maturities_of_ltd','unrestricted_fund_balance')
volume_selected = c('admissions','births','patient_days','lic_beds',
'avail_beds','intensive_care_patient_days','acute_care_patient_days',
'surgical_services_op_min','laboratory_cap_units','radiology_rvus',
'ct_scanning_hect_units','emergency_room_visits')
rate_selected = c('case_mix_index')
ratio_selected = c('deductible','markup','days_in_patient_ar','average_payment_period','average_age_of_plant',
#for y
'operating_margin','return_on_total_assets')
#function to generate features
# selected_col = income_selected
# fst_name = paste0(output_path,'income_m.fst')
feature_spread = function(fst_name){
#load
df_m = read_fst(fst_name) %>%
mutate(hosid_yrs = paste(hosid,yrs,sep='_')) %>%
select(hosid_yrs,metric,value)
df_s = df_m %>% spread(metric,value) %>%
mutate(yrs = sapply(hosid_yrs, FUN=function(x) strsplit(x,'_')[[1]][2]),
hosid = sapply(hosid_yrs, FUN=function(x) strsplit(x,'_')[[1]][1])) %>%
ungroup %>% select(-hosid_yrs)
return(df_s)
}
feature_denom = function(df_s,denom_s){
joined = denom_s %>% inner_join(df_s)
for(i in 4:dim(joined)[2]){
joined[,i] = mapply(function(x,y) x / y, joined[,i], joined[,3])
}
joined = joined %>% select(-denominator)
return(joined)
}
feature_lag = function(df_s,selected_col){
df_s = df_s[,c('yrs','hosid',selected_col)] %>% data.table
for (metric in selected_col){
df_s = df_s[,paste0(metric,'_1'):=lag(eval(parse(text=metric)),1), by=hosid]
df_s = df_s[,paste0(metric,'_3'):=lag(eval(parse(text=metric)),3), by=hosid]
df_s = df_s[,paste0(metric,'_5'):=lag(eval(parse(text=metric)),5), by=hosid]
}
return(df_s)
}
feature_growth = function(df_s,selected_col){
#growth
df_s = df_s %>% data.frame
for (metric in selected_col){
#1year
df_s[,paste0(metric,'_g1')] = mapply(gen_growth,df_s[,metric],df_s[,paste0(metric,'_1')])
#3year
df_s[,paste0(metric,'_g3')] = mapply(gen_growth,df_s[,metric],df_s[,paste0(metric,'_3')])
#5year
df_s[,paste0(metric,'_g5')] = mapply(gen_growth,df_s[,metric],df_s[,paste0(metric,'_5')])
}
return(df_s)
}
#create denominator
denom_s = feature_spread(paste0(output_path,'rate_m.fst'))
denom_s$denominator = denom_s$case_mix_index * denom_s$admissions
denom_s = denom_s %>% select(hosid,yrs,denominator)
#create those with denom
#income
income_s = feature_spread(paste0(output_path,'income_m.fst'))
#income_s = feature_denom(income_s,denom_s)
income_s = feature_lag(income_s,income_selected)
income_s = feature_growth(income_s,income_selected)
#balance
balance_s = feature_spread(paste0(output_path,'balance_m.fst'))
#balance_s = feature_denom(balance_s,denom_s)
balance_s = feature_lag(balance_s,balance_selected)
balance_s = feature_growth(balance_s,balance_selected)
#volume
volume_s = feature_spread(paste0(output_path,'volume_m.fst'))
#volume_s = feature_denom(volume_s,denom_s)
volume_s = feature_lag(volume_s,volume_selected)
volume_s = feature_growth(volume_s,volume_selected)
#create those without denom
#rate
rate_s = feature_spread(paste0(output_path,'rate_m.fst')) %>% select(-admissions)
rate_s = feature_lag(rate_s,rate_selected)
rate_s = feature_growth(rate_s,rate_selected)
#ratio
ratio_s = feature_spread(paste0(output_path,'ratio_m.fst'))
ratio_s = feature_lag(ratio_s,ratio_selected)
ratio_s = feature_growth(ratio_s,ratio_selected)
#already spread
fte_s = read_fst(paste0(output_path,'fte_m.fst'))
fte_s = fte_s %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#fte_s = feature_denom(fte_s,denom_s)
fte_s = feature_lag(fte_s,'fte')
fte_s = feature_growth(fte_s,'fte')
denom_s = feature_lag(denom_s,'denominator')
denom_s = feature_growth(denom_s,'denominator')
df = denom_s %>% inner_join(income_s) %>% inner_join(balance_s) %>% inner_join(volume_s) %>%
inner_join(rate_s) %>% inner_join(ratio_s) %>% inner_join(fte_s)
df = df[complete.cases(df),]
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','inpatient_revenue')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
m <- prophet(sample)
m
future <- make_future_dataframe(m, periods = 10)
future
future <- make_future_dataframe(m, periods = 10,freq='y')
future
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
plot(m, forecast)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','net_revenue_or_expense')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
m <- prophet(sample)
m <- prophet(sample,n.changepoints=2)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','net_revenue_or_expense')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
m <- prophet(sample,n.changepoints=2)
m= NULL
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','net_revenue_or_expense')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
m <- prophet(sample,n.changepoints=2)
m
future <- make_future_dataframe(m, periods = 10, freq = 'y')
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','net_revenue_or_expense')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
m <- prophet(sample,n.changepoints=2)
future <- make_future_dataframe(m, periods = 10, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','total_property_plant_equipment')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
m <- prophet(sample,n.changepoints=2)
future <- make_future_dataframe(m, periods = 10, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','denominator')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
m <- prophet(sample,n.changepoints=2)
future <- make_future_dataframe(m, periods = 10, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
head(forecast)
str(sample)
ymd(sample$ds)
library(lubridate)
table(sample$ds)
year(sample$ds)
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','inpatient_revenue')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast
test_df
names(test_df) =c('ds','real_y')
result = test_df %>% inner_join(forecast)
str(forecast)
str(test_df)
forecast$ds = as.character(forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
View(result)
mean(abs(result$real_y - result$yhat))
mean(abs(result$real_y - result$yhat) / result$real_y)
mean(abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y))
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==3) %>%
select(-hosid)
sample = prophet_df[,c('yrs','inpatient_revenue')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
mean(abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y))
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','inpatient_revenue')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
mean(abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y))
mean(abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y))
result$APE = abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y)
View(result)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','net_revenue_or_expense')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
result$APE = abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y)
mean(result$APE)
View(result)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','total_patient_revenue')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
result$APE = abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y)
View(result)
mean(result$APE)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','denominator')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
result$APE = abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y)
View(result)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','admissions')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
result$APE = abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','total_patient_revenue')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
result$APE = abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','outpatient_revenue')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
result$APE = abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y)
View(result)
mean(result$APE)
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','outpatient_revenue')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
result$APE = abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y)
mean(result$APE)
help("geom_jitter")
prophet_plot_components(m,forecast)
?add_regressor
prophet_df = df[,!grepl('_1|_3|_5|_g1|_g3|_g5',names(df))] %>% filter(hosid==102) %>%
select(-hosid)
sample = prophet_df[,c('yrs','outpatient_revenue')]
names(sample) = c('ds','y')
sample = sample %>% mutate(y=log(y),ds = paste0(ds,'-01-01'))
write_fst(sample,paste0(output_path,'sample.fst'))
train_df = sample[year(sample$ds) <= 2011,]
test_df = sample[year(sample$ds) > 2011,]
names(test_df) =c('ds','real_y')
m <- prophet(train_df,n.changepoints=2)
future <- make_future_dataframe(m, periods = 5, freq = 'y')
forecast <- predict(m, future)
plot(m, forecast)
forecast$ds = as.character(forecast$ds)
result = test_df %>% inner_join(forecast)
result$APE = abs(exp(result$real_y) - exp(result$yhat)) / exp(result$real_y)
mean(result$APE)
