return(joined)
}
feature_lag = function(df_s,selected_col,lag_list=c(1,2,3)){
df_s = df_s[,c('yrs','hosid',selected_col)] %>% data.table
for (l in lag_list){
for (metric in selected_col){
df_s = df_s[,paste0(metric,'_',l):=lag(eval(parse(text=metric)),l), by=hosid]
}
}
return(df_s)
}
feature_growth = function(df_s,selected_col, lag_list=c(1,2,3)){
#growth
df_s = df_s %>% data.frame
for (l in lag_list){
for (metric in selected_col){
df_s[,paste0(metric,'_g',l)] = mapply(gen_growth,df_s[,metric],df_s[,paste0(metric,'_',l)])
}
}
return(df_s)
}
#create denominator
denom_s = feature_spread(paste0(output_path,'rate_m.fst'))
denom_s$denominator = denom_s$case_mix_index * denom_s$admissions
denom_s = denom_s %>% select(hosid,yrs,denominator)
#create those with denom
#income
income_s = feature_spread(paste0(output_path,'income_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#income_s = feature_denom(income_s,denom_s)
# income_s = feature_lag(income_s,income_selected)
# income_s = feature_growth(income_s,income_selected)
#balance
balance_s = feature_spread(paste0(output_path,'balance_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#balance_s = feature_denom(balance_s,denom_s)
# balance_s = feature_lag(balance_s,balance_selected)
# balance_s = feature_growth(balance_s,balance_selected)
#volume
volume_s = feature_spread(paste0(output_path,'volume_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#volume_s = feature_denom(volume_s,denom_s)
# volume_s = feature_lag(volume_s,volume_selected)
# volume_s = feature_growth(volume_s,volume_selected)
#create those without denom
#rate
rate_s = feature_spread(paste0(output_path,'rate_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
# rate_s = feature_lag(rate_s,rate_selected)
# rate_s = feature_growth(rate_s,rate_selected)
#ratio
ratio_s = feature_spread(paste0(output_path,'ratio_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
# ratio_s = feature_lag(ratio_s,ratio_selected)
# ratio_s = feature_growth(ratio_s,ratio_selected)
#already spread
fte_s = read_fst(paste0(output_path,'fte_m.fst'))
fte_s = fte_s %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#fte_s = feature_denom(fte_s,denom_s)
# fte_s = feature_lag(fte_s,'fte')
# fte_s = feature_growth(fte_s,'fte')
# denom_s = feature_lag(denom_s,'denominator')
# denom_s = feature_growth(denom_s,'denominator')
df = denom_s %>% inner_join(income_s, by=c('yrs','hosid')) %>% inner_join(balance_s, by=c("yrs", "hosid")) %>%
inner_join(volume_s, by=c("yrs", "hosid")) %>%
inner_join(rate_s %>%
select(-tax_revenue,-total_patient_revenue,-admissions,-patient_days),
by=c("yrs", "hosid")) %>%
inner_join(ratio_s, by=c("yrs", "hosid")) %>% inner_join(fte_s, by=c("yrs", "hosid"))
df = df[complete.cases(df),]
#filter for those that has at least 20 data points (15 train and 5 test)
enough_data = df %>% group_by(hosid) %>% summarise(nb_yrs = n()) %>% filter(nb_yrs>=20) %>%
select(hosid)
df = df %>% inner_join(enough_data,by=c('hosid')) %>% data.table
df = df[,yrs_id:= row_number(desc(yrs)),by=hosid] %>% mutate(test_flag = ifelse(yrs_id <= 5,1,0))
quarterly = read_excel(paste0(input_path,'quarterly.xlsx'),
col_types = c('numeric', 'numeric','text', rep('numeric',107)))
names(quarterly) = c('yrs','hosid','hosname','quarter','licensed_beds',
#admits
'acute_care_medicare_admits','acute_care_medicaid_admits','acute_care_other_admits','acute_care_total_admits',
'swing_bed_medicare_admits','swing_bed_medicaid_admits','swing_bed_other_admits','swing_bed_total_admits',
'snf_medicare_admits','snf_medicaid_admits','snf_other_admits','snf_total_admits',
'psych_medicare_admits','psych_medicaid_admits','psych_other_admits','psych_total_admits',
#patient days
'acute_care_medicare_patient_days','acute_care_medicaid_patient_days','acute_care_other_patient_days','acute_care_total_patient_days',
'swing_bed_medicare_patient_days','swing_bed_medicaid_patient_days','swing_bed_other_patient_days','swing_bed_total_patient_days',
'snf_medicare_patient_days','snf_medicaid_patient_d ays','snf_other_patient_days','snf_total_patient_days',
'psych_medicare_patient_days','psych_medicaid_patient_days','psych_other_patient_days','psych_total_patient_days',
#surgeries and births
'total_inpatient_surgeries','total_births','total_newborn_days','emergency_room_admits',
#visits; all sums to outpatient visits
'emergency_room_visits','outpatient_surgery_visits', 'observation_visits','home_health_visits',
'all_other_visits','total_outpatient_visits',
#patient revenue
'acute_medicare_inpatient_revenue','acute_medicaid_inpatient_revenue','acute_other_inpatient_revenue',
'acute_inpatient_total_revenue',
'acute_medicare_outpatient_revenue','acute_medicaid_outpatient_revenue',
'acute_other_outpatient_revenue','acute_outpatient_total_revenue',
'swing_bed_medicare_revenue','swing_bed_medicaid_revenue','swing_bed_other_revenue','swing_bed_total_revenue',
'snf_medicare_revenue','snf_medicaid_revenue','snf_other_revenue','snf_total_revenue',
'psych_medicare_revenue','psych_medicaid_revenue','psych_other_revenue','psych_total_revenue',
'home_health_medicare_revenue','home_health_medicaid_revenue','home_health_other_revenue','home_health_total_revenue',
'medicare_patient_revenue','medicaid_patient_revenue','other_patient_revenue','total_patient_revenue',
#contractuals
'acute_contractuals_medicare','acute_contractual_medicaid','acute_contractual_other','acute_contractual_total',
'other_contractuals_medicare','other_contractual_medicaid','other_contractual_other','other_contractual_total',
'total_contractuals_medicare','total_contractual_medicaid','total_contractual_other','total_contractual_total',
#charity
'total_charity_care',
#employees
'facility_payroll_expenses','facility_hours','physician_payroll_expenses','physician_hours',
'total_payroll_expenses',
'total_hours','employee_benefit_expenses',
#expenses
'supply_expenses','depre_expenses','interest_expenses','bad_debts_expenses','other_operating_expenses',
'total_operating_expenses',
#other reveneue
'other_operating_revenue',
#margin
'operating_margin',
#non operating
'net_non_operating',
#tax
'tax_revenue',
#net margin
'net_margin',
#account receivables
'gross_account_receivables_medicare','gross_account_receivables_medicaid',
'gross_account_receivables_other','gross_account_receivables_total'
)
#ds
quarterly$ds = paste0(quarterly$yrs,'-',sprintf('%02s',quarterly$quarter*3),'-01')
#test_flag
#filter for those that has at least 88 data points
enough_data = quarterly %>% group_by(hosid) %>% summarise(nb_yrs = n()) %>% filter(nb_yrs>=88) %>%
select(hosid)
quarterly = quarterly %>% inner_join(enough_data,by=c('hosid')) %>% data.table
#get 20 train samples and 20 test samples
quarterly = quarterly[,id:= row_number(desc(ds)),by=hosid] %>% mutate(test_flag = ifelse(id <= 20,1,0)) %>%
mutate(train_flag = ifelse(id > 20 & id <= 40,1,0))
#filter out medicare/medicaid
quarterly = quarterly[,!grepl('medicare|medicaid',names(quarterly))]
quarterly = quarterly %>%
#redefine revenue
mutate(
#chronic inpatient = swing + snf + psych
#patient revenue = outpatient&home + chronic_inpatient + acute_inpatient
#total revenue = patient revenue + other operating revenue
outpatient_home_health_total_revenue = acute_outpatient_total_revenue + home_health_total_revenue,
chronic_total_admits = psych_total_admits + swing_bed_total_admits + snf_total_admits,
chronic_inpatient_total_revenue = psych_total_revenue + swing_bed_total_revenue + snf_total_revenue,
total_revenue = total_patient_revenue + other_operating_revenue) %>%
#efficiency metrics
mutate(
#revenue per times
outpatient_home_health_per = outpatient_home_health_total_revenue / total_outpatient_visits,
acute_inpatient_per = acute_inpatient_total_revenue / acute_care_total_admits,
chronic_inpatient_per = chronic_inpatient_total_revenue / chronic_total_admits,
#patient expenses per revenue
contractual_eff = total_contractual_total / total_patient_revenue,
physician_eff = physician_payroll_expenses / total_patient_revenue,
facility_eff = facility_payroll_expenses / total_patient_revenue,
benefits_eff = employee_benefit_expenses / total_patient_revenue,
bad_debts_eff = bad_debts_expenses / total_patient_revenue,
supply_eff = supply_expenses / total_patient_revenue,
#other expenses per revenue
interest_eff = interest_expenses / total_patient_revenue,
depre_eff = depre_expenses / total_patient_revenue,
other_eff = other_operating_expenses / total_patient_revenue,
charity_eff = total_charity_care / total_patient_revenue
) %>%
#pure margin
mutate(
#operating expense = payroll + benefits + bad debts + supply + (others + depre + interest)
#patient expense = payroll + benefits + bad debts + supply + (contractual)
total_patient_expenses = total_payroll_expenses+ employee_benefit_expenses + bad_debts_expenses +
supply_expenses + total_contractual_total,
#operating margin = total revenue - (contractual + charity + operating expense)
#patient margin = patient revenue - patient expense
patient_margin=total_patient_revenue - total_patient_expenses)
#get total asset
yearly = df %>% select(hosid,yrs,total_assets) %>%
mutate_all(funs(as.numeric))
quarterly = quarterly %>% left_join(yearly) %>%
mutate(roa = net_margin / total_assets)
write_fst(quarterly,paste0(output_path,'quarterly.fst'))
#train and test
train_df = quarterly  %>% filter(train_flag == 1)
test_df = quarterly %>% filter(test_flag == 1)
all_col = names(train_df)[!grepl('ds|id|test_flag|train_flag|yrs|hosid|hosname|quarter|licensed_beds',names(train_df))]
mape_overalls = NULL
for(col in all_col){
#set up dependent variable
y = col
xs = c()
results = NULL
for(the_id in enough_data$hosid){
#create df for each hospital
sample_train = train_df %>% filter(hosid==the_id)
sample_test = test_df %>% filter(hosid==the_id)
#create prophet dfs
prophet_train = data.frame(ds = sample_train$ds,
y = sample_train[,y])
prophet_test = data.frame(ds = sample_train$ds,
y_actual = sample_test[,y])
#initialize model
m = prophet(n.changepoints = 5)
#add regressors
for (x in xs){
prophet_train[,x] = sapply(sample_train[,x],function(x) x + rnorm(1))
prophet_test[,x] = sapply(sample_test[,x],function(x) x + rnorm(1))
m = m %>% add_regressor(x)
}
#fit
m = fit.prophet(m, prophet_train)
#create data for predictions
future = make_future_dataframe(m, periods = 20, freq = 'quarter')
#add regressors
for (x in xs){
future[,x] = c(prophet_train[,x],prophet_test[,x])
}
#get results
forecast = predict(m, future)
#plot(m,forecast)
forecast$ds = as.character(forecast$ds)
header_df = data.frame(hosid = sample_test$hosid,
ds =sample_test$ds,id = sample_test$id,
y_actual = prophet_test$y_actual)
result = header_df %>% inner_join(forecast)
result$APE = mapply(APE,result$y_actual,result$yhat)
results = rbind(results,result)
}
mape_group = results %>% group_by(id) %>% summarise(nb_pred = n(),MAPE= mean(APE,na.rm = TRUE),
MdAPE = median(APE,na.rm = TRUE))
mape_overall = results %>% summarise(nb_pred = n(),MAPE= mean(APE,na.rm = TRUE),
MdAPE = median(APE,na.rm = TRUE)) %>% ungroup %>%
mutate(variable=y)
mape_overalls = rbind(mape_overalls,mape_overall)
print(paste0('done ',y))
}
View(mape_overalls)
dim(mape_overalls)
View(mape_overalls)
names(quarterly)[grep('expenses',names(quarterly))]
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,message=FALSE)
show_cols = c('patient_margin','total_patient_revenue','total_patient_expenses',
'outpatient_home_health_total_revenue',
'total_outpatient_visits','acute_inpatient_total_revenue',
'acute_care_total_admits','chronic_inpatient_total_revenue',
'chronic_total_admits','total_payroll_expenses','total_hours',
'employee_benefit_expenses','bad_debts_expenses','supply_expenses',
'total_contractual_total'
)
length(show_col)
length(show_cols)
sum(show_cols %in% mape_overalls$variable)
#train and test
train_df = quarterly  %>% filter(train_flag == 1)
test_df = quarterly %>% filter(test_flag == 1)
show_cols = c('patient_margin','total_patient_revenue','total_patient_expenses',
'outpatient_home_health_total_revenue',
'total_outpatient_visits','acute_inpatient_total_revenue',
'acute_care_total_admits','chronic_inpatient_total_revenue',
'chronic_total_admits','total_payroll_expenses','total_hours',
'employee_benefit_expenses','bad_debts_expenses','supply_expenses',
'total_contractual_total'
)
mape_overalls = NULL
mape_groups = NULL
for(col in show_cols){
#set up dependent variable
y = col
xs = c()
results = NULL
for(the_id in enough_data$hosid){
#create df for each hospital
sample_train = train_df %>% filter(hosid==the_id)
sample_test = test_df %>% filter(hosid==the_id)
#create prophet dfs
prophet_train = data.frame(ds = sample_train$ds,
y = sample_train[,y])
prophet_test = data.frame(ds = sample_train$ds,
y_actual = sample_test[,y])
#initialize model
m = prophet(n.changepoints = 5)
#add regressors
for (x in xs){
prophet_train[,x] = sapply(sample_train[,x],function(x) x + rnorm(1))
prophet_test[,x] = sapply(sample_test[,x],function(x) x + rnorm(1))
m = m %>% add_regressor(x)
}
#fit
m = fit.prophet(m, prophet_train)
#create data for predictions
future = make_future_dataframe(m, periods = 20, freq = 'quarter')
#add regressors
for (x in xs){
future[,x] = c(prophet_train[,x],prophet_test[,x])
}
#get results
forecast = predict(m, future)
#plot(m,forecast)
forecast$ds = as.character(forecast$ds)
header_df = data.frame(hosid = sample_test$hosid,
ds =sample_test$ds,id = sample_test$id,
y_actual = prophet_test$y_actual)
result = header_df %>% inner_join(forecast)
result$APE = mapply(APE,result$y_actual,result$yhat)
results = rbind(results,result)
}
mape_group = results %>% group_by(id) %>% summarise(nb_pred = n(),MAPE= mean(APE,na.rm = TRUE),
MdAPE = median(APE,na.rm = TRUE))
mape_overall = results %>% summarise(nb_pred = n(),MAPE= mean(APE,na.rm = TRUE),
MdAPE = median(APE,na.rm = TRUE)) %>% ungroup %>%
mutate(variable=y)
mape_overalls = rbind(mape_overalls,mape_overall)
mape_groups = rbind(mape_groups,mape_group)
}
write_fst(mape_overalls,paste0(output_path,'mape_overalls.fst'))
#mape_overalls = read_fst(paste0(output_path,'mape_overalls.fst'))
View(mape_overalls)
length(show_cols)
View(mape_groups)
help(prophet)
history <- data.frame(ds = seq(as.Date('2015-01-01'), as.Date('2016-01-01'), by = 'd'),
y = sin(1:366/200) + rnorm(366)/10)
m <- prophet(history)
col = 'total_patient_revenue'
the_id = 29
#set up dependent variable
y = col
xs = c()
#create df for each hospital
sample_train = train_df %>% filter(hosid==the_id)
sample_test = test_df %>% filter(hosid==the_id)
holidays <- data_frame(
holiday = 'economic_crisis',
ds = as.Date(c('2008-12-01')),
lower_window = 0,
upper_window = 5
)
#create df for each hospital
sample_train = train_df %>% filter(hosid==the_id)
sample_test = test_df %>% filter(hosid==the_id)
#create prophet dfs
prophet_train = data.frame(ds = sample_train$ds,
y = sample_train[,y])
prophet_test = data.frame(ds = sample_train$ds,
y_actual = sample_test[,y])
#initialize model
m = prophet(n.changepoints = 5,holidays=holidays)
#fit
m = fit.prophet(m, prophet_train)
#create data for predictions
future = make_future_dataframe(m, periods = 20, freq = 'quarter')
#get results
forecast = predict(m, future)
#plot(m,forecast)
prophet_plot_components(m,forecast)
the_id=23
#create df for each hospital
sample_train = train_df %>% filter(hosid==the_id)
sample_test = test_df %>% filter(hosid==the_id)
#create prophet dfs
prophet_train = data.frame(ds = sample_train$ds,
y = sample_train[,y])
prophet_test = data.frame(ds = sample_train$ds,
y_actual = sample_test[,y])
#initialize model
m = prophet(n.changepoints = 5,holidays=holidays)
#add regressors
for (x in xs){
prophet_train[,x] = sapply(sample_train[,x],function(x) x + rnorm(1))
prophet_test[,x] = sapply(sample_test[,x],function(x) x + rnorm(1))
m = m %>% add_regressor(x)
}
#fit
m = fit.prophet(m, prophet_train)
#create data for predictions
future = make_future_dataframe(m, periods = 20, freq = 'quarter')
#add regressors
for (x in xs){
future[,x] = c(prophet_train[,x],prophet_test[,x])
}
#get results
forecast = predict(m, future)
#get results
forecast = predict(m, future)
#plot(m,forecast)
prophet_plot_components(m,forecast)
holidays
prophet_test
the_id = 29
#create df for each hospital
sample_train = train_df %>% filter(hosid==the_id)
sample_test = test_df %>% filter(hosid==the_id)
#create prophet dfs
prophet_train = data.frame(ds = sample_train$ds,
y = sample_train[,y])
prophet_test = data.frame(ds = sample_train$ds,
y_actual = sample_test[,y])
prophet_test
prophet_train
#train and test
train_df = quarterly  %>% filter(train_flag == 1)
test_df = quarterly %>% filter(test_flag == 1)
y = col
xs = c()
results = NULL
for(the_id in enough_data$hosid){
#create df for each hospital
sample_train = train_df %>% filter(hosid==the_id)
sample_test = test_df %>% filter(hosid==the_id)
#create prophet dfs
prophet_train = data.frame(ds = sample_train$ds,
y = sample_train[,y])
prophet_test = data.frame(ds = sample_train$ds,
y_actual = sample_test[,y])
#initialize model
m = prophet(n.changepoints = 5,holidays=holidays)
#add regressors
for (x in xs){
prophet_train[,x] = sapply(sample_train[,x],function(x) x + rnorm(1))
prophet_test[,x] = sapply(sample_test[,x],function(x) x + rnorm(1))
m = m %>% add_regressor(x)
}
#fit
m = fit.prophet(m, prophet_train)
#create data for predictions
future = make_future_dataframe(m, periods = 20, freq = 'quarter')
#add regressors
for (x in xs){
future[,x] = c(prophet_train[,x],prophet_test[,x])
}
#get results
forecast = predict(m, future)
#plot(m,forecast)
prophet_plot_components(m,forecast)
}
col='patient_margin'
the_id =29
#train and test
train_df = quarterly  %>% filter(train_flag == 1)
test_df = quarterly %>% filter(test_flag == 1)
#create df for each hospital
sample_train = train_df %>% filter(hosid==the_id)
#create prophet dfs
prophet_train = data.frame(ds = sample_train$ds,
y = sample_train[,y])
prophet_test = data.frame(ds = sample_train$ds,
y_actual = sample_test[,y])
prophet_train
prophet_test
train_df$ds
test_df$ds
sample_train = train_df %>% filter(hosid==the_id)
sample_test = test_df %>% filter(hosid==the_id)
#create prophet dfs
prophet_train = data.frame(ds = sample_train$ds,
y = sample_train[,y])
prophet_test = data.frame(ds = sample_test$ds,
y_actual = sample_test[,y])
#initialize model
m = prophet(n.changepoints = 5,holidays=holidays)
#fit
m = fit.prophet(m, prophet_train)
#create data for predictions
future = make_future_dataframe(m, periods = 20, freq = 'quarter')
#add regressors
for (x in xs){
future[,x] = c(prophet_train[,x],prophet_test[,x])
}
#get results
forecast = predict(m, future)
#get results
forecast = predict(m, future)
#plot(m,forecast)
prophet_plot_components(m,forecast)
holidays <- data_frame(
holiday = 'economic_crisis',
ds = as.Date(c('2005-12-01')),
lower_window = 0,
upper_window = 5
)
holidays <- data_frame(
holiday = 'economic_crisis',
ds = as.Date(c('2005-01-01')),
lower_window = 0,
upper_window = 5
)
sample_train = train_df %>% filter(hosid==the_id)
sample_test = test_df %>% filter(hosid==the_id)
#create prophet dfs
prophet_train = data.frame(ds = sample_train$ds,
y = sample_train[,y])
prophet_test = data.frame(ds = sample_test$ds,
y_actual = sample_test[,y])
#initialize model
m = prophet(n.changepoints = 5,holidays=holidays)
#add regressors
for (x in xs){
prophet_train[,x] = sapply(sample_train[,x],function(x) x + rnorm(1))
prophet_test[,x] = sapply(sample_test[,x],function(x) x + rnorm(1))
m = m %>% add_regressor(x)
}
#fit
m = fit.prophet(m, prophet_train)
#create data for predictions
future = make_future_dataframe(m, periods = 20, freq = 'quarter')
#add regressors
for (x in xs){
future[,x] = c(prophet_train[,x],prophet_test[,x])
}
#get results
forecast = predict(m, future)
#plot(m,forecast)
prophet_plot_components(m,forecast)
