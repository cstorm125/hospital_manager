#plot(m,forecast)
forecast$ds = as.character(forecast$ds)
header_df = data.frame(hosid = df$hosid,
ds = df$ds,
id = df$id,
y_actual = df[,y],
test_flag = ifelse(df$test_flag==1,TRUE,FALSE))
result = header_df %>% inner_join(forecast) %>%
mutate(APE = mapply(APE,y_actual,yhat))
mape_group = result %>% filter(test_flag==1) %>% select(ds,y_actual,yhat,APE)
mape_overall = result %>% filter(test_flag==1) %>% summarise(nb_pred = n(),
MAPE= mean(APE,na.rm = TRUE),
MdAPE = median(APE,na.rm = TRUE))
return(list(result,mape_group,mape_overall))
}
results
head(result)
les_packages <- lapply(c('prophet','data.table','tidyverse','ggplot','ggthemes','DT','readxl',
'reshape2','fst','plotly','DT','ggthemes'),require, character.only = TRUE)
result$ds
1:length(result$ds)
seq(1:length(result$ds),3)
seq(1,length(result$ds),4)
seq(1,length(result$ds),4)
results$ds[seq(1,length(result$ds),4)]
df
hed(df)
head(df)
nchar('outpatient')
nchar('chronic')
x = quarterly %>% filter(hosid==915) %>% select(hosid,ds,acute_care_total_admits,chronic_total_admits)
View(x)
x = quarterly %>% filter(hosid==915) %>% select(hosid,ds,acute_care_total_admits,chronic_total_admits,acute_inpatient_total_revenue)
View(x)
box
substr(c('hey','yo','hallo'),1,2)
#create denominator
denom_s = feature_spread(paste0(output_path,'rate_m.fst'))
denom_s$denominator = denom_s$case_mix_index * denom_s$admissions
denom_s = denom_s %>% select(hosid,yrs,denominator)
#create those with denom
#income
income_s = feature_spread(paste0(output_path,'income_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#income_s = feature_denom(income_s,denom_s)
# income_s = feature_lag(income_s,income_selected)
# income_s = feature_growth(income_s,income_selected)
#balance
balance_s = feature_spread(paste0(output_path,'balance_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#balance_s = feature_denom(balance_s,denom_s)
# balance_s = feature_lag(balance_s,balance_selected)
# balance_s = feature_growth(balance_s,balance_selected)
#volume
volume_s = feature_spread(paste0(output_path,'volume_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#volume_s = feature_denom(volume_s,denom_s)
# volume_s = feature_lag(volume_s,volume_selected)
# volume_s = feature_growth(volume_s,volume_selected)
#create those without denom
#rate
rate_s = feature_spread(paste0(output_path,'rate_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
# rate_s = feature_lag(rate_s,rate_selected)
# rate_s = feature_growth(rate_s,rate_selected)
#ratio
ratio_s = feature_spread(paste0(output_path,'ratio_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
# ratio_s = feature_lag(ratio_s,ratio_selected)
# ratio_s = feature_growth(ratio_s,ratio_selected)
#already spread
fte_s = read_fst(paste0(output_path,'fte_m.fst'))
fte_s = fte_s %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#fte_s = feature_denom(fte_s,denom_s)
# fte_s = feature_lag(fte_s,'fte')
# fte_s = feature_growth(fte_s,'fte')
# denom_s = feature_lag(denom_s,'denominator')
# denom_s = feature_growth(denom_s,'denominator')
df = denom_s %>% inner_join(income_s, by=c('yrs','hosid')) %>% inner_join(balance_s, by=c("yrs", "hosid")) %>%
inner_join(volume_s, by=c("yrs", "hosid")) %>%
inner_join(rate_s %>%
select(-tax_revenue,-total_patient_revenue,-admissions,-patient_days),
by=c("yrs", "hosid")) %>%
inner_join(ratio_s, by=c("yrs", "hosid")) %>% inner_join(fte_s, by=c("yrs", "hosid"))
df = df[complete.cases(df),]
#filter for those that has at least 20 data points (15 train and 5 test)
enough_data = df %>% group_by(hosid) %>% summarise(nb_yrs = n()) %>% filter(nb_yrs>=20) %>%
select(hosid)
df = df %>% inner_join(enough_data,by=c('hosid')) %>% data.table
df = df[,yrs_id:= row_number(desc(yrs)),by=hosid] %>% mutate(test_flag = ifelse(yrs_id <= 5,1,0))
quarterly$yrs
dim(quarterly)
x = quarterly %>% inner_join(yearly)
yearly = df %>% select(hosid,yrs,total_assets)
x = quarterly %>% inner_join(yearly)
str(yearly)
yearly = df %>% select(hosid,yrs,total_assets) %>%
mutate_all(funs(as.numeric))
x = quarterly %>% inner_join(yearly)
dim(x)
x = quarterly %>% left_join(yearly)
sum(is.na(x$total_assets))
quarterly = read_excel(paste0(input_path,'quarterly.xlsx'),
col_types = c('numeric', 'numeric','text', rep('numeric',107)))
names(quarterly) = c('yrs','hosid','hosname','quarter','licensed_beds',
#admits
'acute_care_medicare_admits','acute_care_medicaid_admits','acute_care_other_admits','acute_care_total_admits',
'swing_bed_medicare_admits','swing_bed_medicaid_admits','swing_bed_other_admits','swing_bed_total_admits',
'snf_medicare_admits','snf_medicaid_admits','snf_other_admits','snf_total_admits',
'psych_medicare_admits','psych_medicaid_admits','psych_other_admits','psych_total_admits',
#patient days
'acute_care_medicare_patient_days','acute_care_medicaid_patient_days','acute_care_other_patient_days','acute_care_total_patient_days',
'swing_bed_medicare_patient_days','swing_bed_medicaid_patient_days','swing_bed_other_patient_days','swing_bed_total_patient_days',
'snf_medicare_patient_days','snf_medicaid_patient_d ays','snf_other_patient_days','snf_total_patient_days',
'psych_medicare_patient_days','psych_medicaid_patient_days','psych_other_patient_days','psych_total_patient_days',
#surgeries and births
'total_inpatient_surgeries','total_births','total_newborn_days','emergency_room_admits',
#visits; all sums to outpatient visits
'emergency_room_visits','outpatient_surgery_visits', 'observation_visits','home_health_visits',
'all_other_visits','total_outpatient_visits',
#patient revenue
'acute_medicare_inpatient_revenue','acute_medicaid_inpatient_revenue','acute_other_inpatient_revenue',
'acute_inpatient_total_revenue',
'acute_medicare_outpatient_revenue','acute_medicaid_outpatient_revenue',
'acute_other_outpatient_revenue','acute_outpatient_total_revenue',
'swing_bed_medicare_revenue','swing_bed_medicaid_revenue','swing_bed_other_revenue','swing_bed_total_revenue',
'snf_medicare_revenue','snf_medicaid_revenue','snf_other_revenue','snf_total_revenue',
'psych_medicare_revenue','psych_medicaid_revenue','psych_other_revenue','psych_total_revenue',
'home_health_medicare_revenue','home_health_medicaid_revenue','home_health_other_revenue','home_health_total_revenue',
'medicare_patient_revenue','medicaid_patient_revenue','other_patient_revenue','total_patient_revenue',
#contractuals
'acute_contractuals_medicare','acute_contractual_medicaid','acute_contractual_other','acute_contractual_total',
'other_contractuals_medicare','other_contractual_medicaid','other_contractual_other','other_contractual_total',
'total_contractuals_medicare','total_contractual_medicaid','total_contractual_other','total_contractual_total',
#charity
'total_charity_care',
#employees
'facility_payroll_expenses','facility_hours','physician_payroll_expenses','physician_hours',
'total_payroll_expenses',
'total_hours','employee_benefit_expenses',
#expenses
'supply_expenses','depre_expenses','interest_expenses','bad_debts_expenses','other_operating_expenses',
'total_operating_expenses',
#other reveneue
'other_operating_revenue',
#margin
'operating_margin',
#non operating
'net_non_operating',
#tax
'tax_revenue',
#net margin
'net_margin',
#account receivables
'gross_account_receivables_medicare','gross_account_receivables_medicaid',
'gross_account_receivables_other','gross_account_receivables_total'
)
#ds
quarterly$ds = paste0(quarterly$yrs,'-',sprintf('%02s',quarterly$quarter*3),'-01')
#test_flag
#filter for those that has at least 88 data points
enough_data = quarterly %>% group_by(hosid) %>% summarise(nb_yrs = n()) %>% filter(nb_yrs>=88) %>%
select(hosid)
quarterly = quarterly %>% inner_join(enough_data,by=c('hosid')) %>% data.table
#get 20 train samples and 20 test samples
quarterly = quarterly[,id:= row_number(desc(ds)),by=hosid] %>% mutate(test_flag = ifelse(id <= 20,1,0)) %>%
mutate(train_flag = ifelse(id > 20 & id <= 40,1,0))
#filter out medicare/medicaid
quarterly = quarterly[,!grepl('medicare|medicaid',names(quarterly))]
quarterly = quarterly %>%
#redefine revenue
mutate(
#chronic inpatient = swing + snf + psych
#patient revenue = outpatient&home + chronic_inpatient + acute_inpatient
#total revenue = patient revenue + other operating revenue
outpatient_home_health_total_revenue = acute_outpatient_total_revenue + home_health_total_revenue,
chronic_total_admits = psych_total_admits + swing_bed_total_admits + snf_total_admits,
chronic_inpatient_total_revenue = psych_total_revenue + swing_bed_total_revenue + snf_total_revenue,
total_revenue = total_patient_revenue + other_operating_revenue) %>%
#efficiency metrics
mutate(
#revenue per times
outpatient_home_health_per = outpatient_home_health_total_revenue / total_outpatient_visits,
acute_inpatient_per = acute_inpatient_total_revenue / acute_care_total_admits,
chronic_inpatient_per = chronic_inpatient_total_revenue / chronic_total_admits,
#patient expenses per revenue
contractual_eff = total_contractual_total / total_patient_revenue,
physician_eff = physician_payroll_expenses / total_patient_revenue,
facility_eff = facility_payroll_expenses / total_patient_revenue,
benefits_eff = employee_benefit_expenses / total_patient_revenue,
bad_debts_eff = bad_debts_expenses / total_patient_revenue,
supply_eff = supply_expenses / total_patient_revenue,
#other expenses per revenue
interest_eff = interest_expenses / total_patient_revenue,
depre_eff = depre_expenses / total_patient_revenue,
other_eff = other_operating_expenses / total_patient_revenue,
charity_eff = total_charity_care / total_patient_revenue
) %>%
#pure margin
mutate(
#operating expense = payroll + benefits + bad debts + supply + (others + depre + interest)
#patient expense = payroll + benefits + bad debts + supply + (contractual)
total_patient_expenses = total_payroll_expenses+ employee_benefit_expenses + bad_debts_expenses +
supply_expenses + total_contractual_total,
#operating margin = total revenue - (contractual + charity + operating expense)
#patient margin = patient revenue - patient expense
patient_margin=total_patient_revenue - total_patient_expenses)
#get total asset
yearly = df %>% select(hosid,yrs,total_assets) %>%
mutate_all(funs(as.numeric))
quarterly = quarterly %>% left_join(yearly)
write_fst(quarterly,paste0(output_path,'quarterly.fst'))
quarterly$chronic_inpatient_per
quarterly$roa
quarterly = quarterly %>% left_join(yearly) %>%
mutate(roa = net_margin / total_assets)
write_fst(quarterly,paste0(output_path,'quarterly.fst'))
control_df = df()[,c('hosid','ds','operating_margin','net_margin','roa')]
df$roa
quarterly$roa
summary(quarterly$roa)
sum(quarterly$roa>1)
sum(quarterly$roa>=1)
sum(quarterly$roa>=1,na.rm = TRUE)
quarterly = quarterly %>% left_join(yearly) %>%
mutate(roa = net_margin / total_assets,
roa = ifelse(roa>1,NA,roa))
write_fst(quarterly,paste0(output_path,'quarterly.fst'))
summary(quarterly$roa)
quarterly = read_excel(paste0(input_path,'quarterly.xlsx'),
col_types = c('numeric', 'numeric','text', rep('numeric',107)))
names(quarterly) = c('yrs','hosid','hosname','quarter','licensed_beds',
#admits
'acute_care_medicare_admits','acute_care_medicaid_admits','acute_care_other_admits','acute_care_total_admits',
'swing_bed_medicare_admits','swing_bed_medicaid_admits','swing_bed_other_admits','swing_bed_total_admits',
'snf_medicare_admits','snf_medicaid_admits','snf_other_admits','snf_total_admits',
'psych_medicare_admits','psych_medicaid_admits','psych_other_admits','psych_total_admits',
#patient days
'acute_care_medicare_patient_days','acute_care_medicaid_patient_days','acute_care_other_patient_days','acute_care_total_patient_days',
'swing_bed_medicare_patient_days','swing_bed_medicaid_patient_days','swing_bed_other_patient_days','swing_bed_total_patient_days',
'snf_medicare_patient_days','snf_medicaid_patient_d ays','snf_other_patient_days','snf_total_patient_days',
'psych_medicare_patient_days','psych_medicaid_patient_days','psych_other_patient_days','psych_total_patient_days',
#surgeries and births
'total_inpatient_surgeries','total_births','total_newborn_days','emergency_room_admits',
#visits; all sums to outpatient visits
'emergency_room_visits','outpatient_surgery_visits', 'observation_visits','home_health_visits',
'all_other_visits','total_outpatient_visits',
#patient revenue
'acute_medicare_inpatient_revenue','acute_medicaid_inpatient_revenue','acute_other_inpatient_revenue',
'acute_inpatient_total_revenue',
'acute_medicare_outpatient_revenue','acute_medicaid_outpatient_revenue',
'acute_other_outpatient_revenue','acute_outpatient_total_revenue',
'swing_bed_medicare_revenue','swing_bed_medicaid_revenue','swing_bed_other_revenue','swing_bed_total_revenue',
'snf_medicare_revenue','snf_medicaid_revenue','snf_other_revenue','snf_total_revenue',
'psych_medicare_revenue','psych_medicaid_revenue','psych_other_revenue','psych_total_revenue',
'home_health_medicare_revenue','home_health_medicaid_revenue','home_health_other_revenue','home_health_total_revenue',
'medicare_patient_revenue','medicaid_patient_revenue','other_patient_revenue','total_patient_revenue',
#contractuals
'acute_contractuals_medicare','acute_contractual_medicaid','acute_contractual_other','acute_contractual_total',
'other_contractuals_medicare','other_contractual_medicaid','other_contractual_other','other_contractual_total',
'total_contractuals_medicare','total_contractual_medicaid','total_contractual_other','total_contractual_total',
#charity
'total_charity_care',
#employees
'facility_payroll_expenses','facility_hours','physician_payroll_expenses','physician_hours',
'total_payroll_expenses',
'total_hours','employee_benefit_expenses',
#expenses
'supply_expenses','depre_expenses','interest_expenses','bad_debts_expenses','other_operating_expenses',
'total_operating_expenses',
#other reveneue
'other_operating_revenue',
#margin
'operating_margin',
#non operating
'net_non_operating',
#tax
'tax_revenue',
#net margin
'net_margin',
#account receivables
'gross_account_receivables_medicare','gross_account_receivables_medicaid',
'gross_account_receivables_other','gross_account_receivables_total'
)
#ds
quarterly$ds = paste0(quarterly$yrs,'-',sprintf('%02s',quarterly$quarter*3),'-01')
#test_flag
#filter for those that has at least 88 data points
enough_data = quarterly %>% group_by(hosid) %>% summarise(nb_yrs = n()) %>% filter(nb_yrs>=88) %>%
select(hosid)
quarterly = quarterly %>% inner_join(enough_data,by=c('hosid')) %>% data.table
#get 20 train samples and 20 test samples
quarterly = quarterly[,id:= row_number(desc(ds)),by=hosid] %>% mutate(test_flag = ifelse(id <= 20,1,0)) %>%
mutate(train_flag = ifelse(id > 20 & id <= 40,1,0))
#filter out medicare/medicaid
quarterly = quarterly[,!grepl('medicare|medicaid',names(quarterly))]
quarterly = quarterly %>%
#redefine revenue
mutate(
#chronic inpatient = swing + snf + psych
#patient revenue = outpatient&home + chronic_inpatient + acute_inpatient
#total revenue = patient revenue + other operating revenue
outpatient_home_health_total_revenue = acute_outpatient_total_revenue + home_health_total_revenue,
chronic_total_admits = psych_total_admits + swing_bed_total_admits + snf_total_admits,
chronic_inpatient_total_revenue = psych_total_revenue + swing_bed_total_revenue + snf_total_revenue,
total_revenue = total_patient_revenue + other_operating_revenue) %>%
#efficiency metrics
mutate(
#revenue per times
outpatient_home_health_per = outpatient_home_health_total_revenue / total_outpatient_visits,
acute_inpatient_per = acute_inpatient_total_revenue / acute_care_total_admits,
chronic_inpatient_per = chronic_inpatient_total_revenue / chronic_total_admits,
#patient expenses per revenue
contractual_eff = total_contractual_total / total_patient_revenue,
physician_eff = physician_payroll_expenses / total_patient_revenue,
facility_eff = facility_payroll_expenses / total_patient_revenue,
benefits_eff = employee_benefit_expenses / total_patient_revenue,
bad_debts_eff = bad_debts_expenses / total_patient_revenue,
supply_eff = supply_expenses / total_patient_revenue,
#other expenses per revenue
interest_eff = interest_expenses / total_patient_revenue,
depre_eff = depre_expenses / total_patient_revenue,
other_eff = other_operating_expenses / total_patient_revenue,
charity_eff = total_charity_care / total_patient_revenue
) %>%
#pure margin
mutate(
#operating expense = payroll + benefits + bad debts + supply + (others + depre + interest)
#patient expense = payroll + benefits + bad debts + supply + (contractual)
total_patient_expenses = total_payroll_expenses+ employee_benefit_expenses + bad_debts_expenses +
supply_expenses + total_contractual_total,
#operating margin = total revenue - (contractual + charity + operating expense)
#patient margin = patient revenue - patient expense
patient_margin=total_patient_revenue - total_patient_expenses)
#get total asset
yearly = df %>% select(hosid,yrs,total_assets) %>%
mutate_all(funs(as.numeric))
quarterly = quarterly %>% left_join(yearly) %>%
mutate(roa = net_margin / total_assets)
write_fst(quarterly,paste0(output_path,'quarterly.fst'))
df = quarterly
names(df)[grep('_expenses',names(df))]
controllable_expenses = c('interest_expenses','depre_expenses','other_operating_expenses','total_charity_care')
x = df[,controllable_expenses]
View(x)
patient_expenses = c('total_payroll_expenses','employee_benefit_expenses',
'supply_expenses','bad_debts_expenses',
'total_contractual_total')
melt
gen_forecast(df(),i)
df$test_flag
summary(df$test_flag)
#train and test
train_df = quarterly  %>% filter(train_flag == 1)
all_col = names(train_df)[!grepl('ds|id|test_flag|train_flag|yrs|hosid|hosname|quarter|licensed_beds',names(train_df))]
names(all_col)
all_col
#create denominator
denom_s = feature_spread(paste0(output_path,'rate_m.fst'))
denom_s$denominator = denom_s$case_mix_index * denom_s$admissions
denom_s = denom_s %>% select(hosid,yrs,denominator)
#create those with denom
#income
income_s = feature_spread(paste0(output_path,'income_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#income_s = feature_denom(income_s,denom_s)
# income_s = feature_lag(income_s,income_selected)
# income_s = feature_growth(income_s,income_selected)
#balance
balance_s = feature_spread(paste0(output_path,'balance_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#balance_s = feature_denom(balance_s,denom_s)
# balance_s = feature_lag(balance_s,balance_selected)
# balance_s = feature_growth(balance_s,balance_selected)
#volume
volume_s = feature_spread(paste0(output_path,'volume_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#volume_s = feature_denom(volume_s,denom_s)
# volume_s = feature_lag(volume_s,volume_selected)
# volume_s = feature_growth(volume_s,volume_selected)
#create those without denom
#rate
rate_s = feature_spread(paste0(output_path,'rate_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
# rate_s = feature_lag(rate_s,rate_selected)
# rate_s = feature_growth(rate_s,rate_selected)
#ratio
ratio_s = feature_spread(paste0(output_path,'ratio_m.fst')) %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
# ratio_s = feature_lag(ratio_s,ratio_selected)
# ratio_s = feature_growth(ratio_s,ratio_selected)
#already spread
fte_s = read_fst(paste0(output_path,'fte_m.fst'))
fte_s = fte_s %>% mutate(hosid = as.character(hosid), yrs = as.character(yrs))
#fte_s = feature_denom(fte_s,denom_s)
# fte_s = feature_lag(fte_s,'fte')
# fte_s = feature_growth(fte_s,'fte')
# denom_s = feature_lag(denom_s,'denominator')
# denom_s = feature_growth(denom_s,'denominator')
df = denom_s %>% inner_join(income_s, by=c('yrs','hosid')) %>% inner_join(balance_s, by=c("yrs", "hosid")) %>%
inner_join(volume_s, by=c("yrs", "hosid")) %>%
inner_join(rate_s %>%
select(-tax_revenue,-total_patient_revenue,-admissions,-patient_days),
by=c("yrs", "hosid")) %>%
inner_join(ratio_s, by=c("yrs", "hosid")) %>% inner_join(fte_s, by=c("yrs", "hosid"))
df = df[complete.cases(df),]
#filter for those that has at least 20 data points (15 train and 5 test)
enough_data = df %>% group_by(hosid) %>% summarise(nb_yrs = n()) %>% filter(nb_yrs>=20) %>%
select(hosid)
df = df %>% inner_join(enough_data,by=c('hosid')) %>% data.table
df = df[,yrs_id:= row_number(desc(yrs)),by=hosid] %>% mutate(test_flag = ifelse(yrs_id <= 5,1,0))
head(mape_overalls)
mape_performance = read_fst(paste0(output_path,'mape_overalls.fst'))
head(mape_performance)
mape_performance = read_fst(paste0(output_path,'mape_overalls.fst')) %>%
select(variable,nb_pred,MAPE,MdAPE)
datatable(mape_performance,
colnames = c('Variable' = 1,
'# Forecasts' = 2 ,
'Mean Error' = 3 ,
'Median Error' = 4
),
class = 'cell-border stripe' ,
rownames = FALSE,
options=list(dom='t')
) %>%
formatPercentage(c('Mean Error','Median Error'), 2)
mape_performance = read_fst(paste0(output_path,'mape_overalls.fst')) %>%
select(variable,nb_pred,MAPE,MdAPE)
datatable(mape_performance,
colnames = c('Variable' = 1,
'# Forecasts' = 2 ,
'Mean Error' = 3 ,
'Median Error' = 4
),
class = 'cell-border stripe' ,
rownames = FALSE,
) %>%
formatPercentage(c('Mean Error','Median Error'), 2)
mape_performance = read_fst(paste0(output_path,'mape_overalls.fst')) %>%
select(variable,nb_pred,MAPE,MdAPE)
datatable(mape_performance %>% arrange(-MdAPE),
colnames = c('Variable' = 1,
'# Forecasts' = 2 ,
'Mean Error' = 3 ,
'Median Error' = 4
),
class = 'cell-border stripe' ,
rownames = FALSE,
) %>%
formatPercentage(c('Mean Error','Median Error'), 2)
mape_performance = read_fst(paste0(output_path,'mape_overalls.fst')) %>%
select(variable,nb_pred,MAPE,MdAPE)
datatable(mape_performance %>% arrange(MdAPE),
colnames = c('Variable' = 1,
'# Forecasts' = 2 ,
'Mean Error' = 3 ,
'Median Error' = 4
),
class = 'cell-border stripe' ,
rownames = FALSE,
) %>%
formatPercentage(c('Mean Error','Median Error'), 2)
knitr::opts_chunk$set(echo = FALSE,warning=FALSE,message=FALSE)
les_packages <- lapply(c('prophet','data.table','tidyverse','ggplot','ggthemes','DT','readxl',
'reshape2','fst'),require, character.only = TRUE)
## load files
input_path = '../data/raw/'
output_path =  '../data/processed/'
#utils
process_col = function(x){
y = gsub('[^[:alnum:] ]', '', x)
y = gsub('\\s+',' ', y)
y = tolower(gsub(' ','_',y))
return(y)
}
check_sign = function(x){
if(x==0|is.na(x)){
return(0)
} else if(x > 0){
return(1)
} else {
return(-1)
}
}
gen_growth = function(x,x_lag){
#only handle numbers with same sign
if(check_sign(x)!=check_sign(x_lag) | check_sign(x_lag)==0) return(check_sign(x) - check_sign(x_lag))
y = (x-x_lag) / abs(x_lag)
return(y)
}
median_interval = function(x,p=0.05){
sort(x)[qbinom(c(p/2,1-p/2), length(x), 0.5)]
}
APE = function(actual,pred){
if(is.nan(actual) | is.na(actual)) return(NA)
if(actual!=0){
return(abs(pred-actual) / abs(actual))
} else {
return(NA)
}
}
log_trans = function(x){
if(x>0){
return(log(x))
} else{
return(NA)
}
}
balance = read_excel(paste0(input_path,'BalanceSheet.xlsx'),
col_types = c('numeric', 'text', rep('numeric',26)))
#name to hosid table
names_idx = seq(1,dim(balance)[1],17)
names_df = balance[names_idx,1:2]
names_df = names_df[complete.cases(names_df),]
names(names_df) = c('hosid','hosname')
datatable(names_df)
balance = balance[-names_idx,]
names(balance) = c('hosid','metric',names(balance)[3:dim(balance)[2]])
balance = balance[!is.na(balance$hosid),]
#melted
balance_m = melt(balance, id.vars = c('hosid','metric'))
